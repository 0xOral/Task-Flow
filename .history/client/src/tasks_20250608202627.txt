#################################################################
# Project Prompt: Part 2 - Feature Enhancement & Bug Fixes
#################################################################

### 1. General Instructions (Continued)
Building upon the previous set of instructions, the following principles must be upheld throughout the development process:
- **Code Quality:** Maintain best practices for writing clean, readable, and maintainable TypeScript and React code.
- **Consistency:** Ensure the styling and component behavior are consistent across all new and existing pages, adhering to the established "Enterprise University" theme.
- **Performance & SEO:** The application must remain performant. While the SEO score is excellent, performance optimizations are a key priority.

---

### 2. Task 1: Enhance Students Page (`src/pages/students/index.tsx`)

This task focuses on adding user controls for data display and fixing a critical data-fetching error.

#### 2.1. Implement View Control & Dynamic Pagination
- **Objective:** Allow the user to control how many students are displayed per page and ensure the pagination updates accordingly.
- **Implementation Steps:**
    1.  **State Management:** Introduce two state variables in your component:
        - `pageSize` (or `limit`): To store the number of items per page. Initialize it with a default value of `10`.
        - `currentPage`: To track the current active page, initialized to `1`.
    2.  **View Dropdown Button:**
        - Add a "View" button next to your search or filter controls.
        - When clicked, it should reveal a dropdown menu with options: `10`, `20`, `50`.
        - When a user selects an option, update the `pageSize` state with the chosen value and reset `currentPage` to `1`.
    3.  **Dynamic Pagination Logic:**
        - Your API call for fetching students should now include both `page=currentPage` and `limit=pageSize` as query parameters.
        - The total number of pages in your pagination component must be calculated dynamically based on the total number of students and the selected `pageSize`. The formula is: `totalPages = Math.ceil(totalStudents / pageSize)`.
        - Every time the `pageSize` changes, you must re-fetch the data from the API with the new parameters.

#### 2.2. Fix TypeScript Error: `Property 'totalStudents' does not exist`
- **Problem:** The TypeScript compiler is reporting an error because the type definition for your API response, `PaginatedStudentsResponse`, is missing a property that your code is trying to access.
- **Error Message:** `Property 'totalStudents' does not exist on type 'PaginatedStudentsResponse'.`
- **Solution:**
    1.  Locate the type or interface definition for `PaginatedStudentsResponse` in your project (it might be in `src/types/index.ts` or a similar file).
    2.  Add the missing property to the definition. It should look something like this:

    ```typescript
    export interface PaginatedStudentsResponse {
      students: Student[]; // or whatever your student array property is called
      totalPages: number;
      currentPage: number;
      totalStudents: number; // <-- Add this line
    }
    ```
    This fix ensures that TypeScript understands the shape of the data you are receiving from the API, resolving the error.

---

### 3. Task 2: Fix 404 Error on "View University" Button

- **Problem:** Clicking the "View University" button results in a 404 "Not Found" error, indicating that the URL being pushed to the router does not correspond to an existing page.
- **Code Snippet:** `router.push(`/universities/${student.universityId?._id ?? "*"}`)`
- **Troubleshooting & Solution:** The most likely cause is a mismatch between the URL path and your file structure in the `pages` directory.
- **Action Plan:**
    1.  **Check File-Based Routing:** Verify the exact path to your dynamic university page file. In Next.js (with the Pages Router), the URL `/universities/[id]` must correspond to a file at `src/pages/universities/[id].tsx`.
        - **Is your file named `[universityId].tsx`?** If so, your route should be `/universities/${student.universityId._id}`.
        - **Is your folder named `university` (singular)?** The path should be `/university/...`.
        - **Correction:** Adjust the path in `router.push()` to perfectly match your file system structure.
    2.  **Verify Data Integrity:** Ensure that `student.universityId` and `student.universityId._id` are not `null` or `undefined`. While you have a fallback (`?? "*"`), it's possible you don't have a catch-all route `[...slug].tsx` configured to handle `"*"`, leading to a 404. Log the `student.universityId` to the console to confirm you are receiving the correct data object.

---

### 4. Task 3: Improve Performance Score (from 68 to a higher value)

- **Objective:** Increase the Lighthouse performance score without compromising the 100% SEO score.
- **Action Plan:** Implement the following Next.js best practices.

    1.  **Image Optimization (High Impact):**
        - **Action:** Replace all standard `<img>` tags with the `next/image` component. This is the single most effective way to improve image-related performance metrics.
        - **Benefit:** `next/image` provides automatic resizing, optimization, lazy loading, and serving of images in modern formats like WebP.

    2.  **Font Optimization:**
        - **Action:** Use `next/font` to load your Google Fonts or local fonts.
        - **Benefit:** This will self-host the fonts, eliminating an extra network request to Google's servers. It also preloads fonts and prevents Cumulative Layout Shift (CLS).
        - **Example:**
          ```javascript
          import { Inter } from 'next/font/google';
          const inter = Inter({ subsets: ['latin'] });
          ```

    3.  **Dynamic Imports for Heavy Components:**
        - **Action:** Identify any large components that are not immediately visible on page load (e.g., complex modals, charts, or components far down the page) and load them dynamically.
        - **Benefit:** This splits the code into smaller chunks, reducing the initial JavaScript payload sent to the browser.
        - **Example:**
          ```javascript
          import dynamic from 'next/dynamic';
          const HeavyComponent = dynamic(() => import('../components/HeavyComponent'));
          ```

    4.  **Memoize Components:**
        - **Action:** Wrap components that re-render often with `React.memo`. This is especially useful for items in a list (like your student cards).
        - **Benefit:** `React.memo` prevents a component from re-rendering if its props have not changed, saving CPU time.