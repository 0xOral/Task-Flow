# API ENDPOINTS IMPLEMENTATION GUIDE

This document provides a comprehensive template for implementing API endpoints with their corresponding frontend integration in the Task-Flow LMS project.

## ENDPOINT TEMPLATE STRUCTURE

```
ENTITY: [ENTITY_NAME] ([X] endpoints)

Endpoint: [endpointName]
Method: [HTTP_METHOD]
URL: [/endpoint/path]
Query Key: [query_key_array]
API Source: [file_path] → [function_name]()
Hook: [hook_name]([parameters])
Query Params: [optional_parameters]
Request Body: [request_type] { ...fields }
Response: [response_type]
Cache Invalidation: [cache_keys_to_invalidate]
Performance: [caching_strategy_and_optimizations]
Description: [endpoint_purpose]
```

================================================================================
## ENTITY: STUDENTS (5 endpoints)

### Endpoint: getAllStudents
- Method: GET
- URL: /students
- Query Key: ['students', 'list', { page?, limit?, search?, universityId? }]
- API Source: lib/api/students.api.ts → getAllStudents()
- Hook: useStudentsQuery({ page, limit, search, universityId })
- Query Params: page?, limit?, search?, universityId?
- Response: { students: Student[], total: number, page: number, totalPages: number }
- Performance: staleTime: 2min, background refetch, infinite scroll
- Description: Fetch all students with pagination and filtering

### Endpoint: getStudentById
- Method: GET
- URL: /students/:id
- Query Key: ['students', 'detail', id]
- API Source: lib/api/students.api.ts → getStudentById()
- Hook: useStudentQuery(id)
- Response: Student
- Performance: staleTime: 5min, enabled: !!id
- Description: Fetch student details by ID

### Endpoint: createStudent
- Method: POST
- URL: /students
- Mutation Key: ['students', 'create']
- API Source: lib/api/students.api.ts → createStudent()
- Hook: useCreateStudentMutation()
- Request Body: CreateStudentRequest { name: string, email: string, password: string, universityId: string, courses?: string[] }
- Response: Student
- Cache Invalidation: ['students', 'list'], optimistic updates
- Performance: Optimistic creation, immediate UI feedback
- Description: Create a new student

### Endpoint: updateStudent
- Method: PATCH
- URL: /students/:id
- Mutation Key: ['students', 'update']
- API Source: lib/api/students.api.ts → updateStudent()
- Hook: useUpdateStudentMutation()
- Request Body: UpdateStudentRequest { name?: string, email?: string, phone?: string, courses?: string[] }
- Response: Student
- Cache Invalidation: ['students', 'list'], ['students', 'detail', id]
- Performance: Optimistic updates, debounced auto-save potential
- Description: Update student information

### Endpoint: deleteStudent
- Method: DELETE
- URL: /students/:id
- Mutation Key: ['students', 'delete']
- API Source: lib/api/students.api.ts → deleteStudent()
- Hook: useDeleteStudentMutation()
- Response: { message: string }
- Cache Invalidation: ['students', 'list'], cache removal
- Performance: Optimistic deletion with undo capability
- Description: Remove a student from the system

================================================================================
## ENTITY: TEACHERS (5 endpoints)

### Endpoint: getAllTeachers
- Method: GET
- URL: /teachers
- Query Key: ['teachers', 'list', { page?, limit?, search?, universityId? }]
- API Source: lib/api/teachers.api.ts → getAllTeachers()
- Hook: useTeachersQuery({ page, limit, search, universityId })
- Query Params: page?, limit?, search?, universityId?
- Response: { teachers: Teacher[], total: number, page: number, totalPages: number }
- Performance: staleTime: 3min, background refetch, infinite scroll
- Description: Fetch all teachers with pagination and filtering

### Endpoint: getTeacherById
- Method: GET
- URL: /teachers/:id
- Query Key: ['teachers', 'detail', id]
- API Source: lib/api/teachers.api.ts → getTeacherById()
- Hook: useTeacherQuery(id)
- Response: Teacher
- Performance: staleTime: 8min, enabled: !!id
- Description: Fetch teacher details by ID

### Endpoint: createTeacher
- Method: POST
- URL: /teachers
- Mutation Key: ['teachers', 'create']
- API Source: lib/api/teachers.api.ts → createTeacher()
- Hook: useCreateTeacherMutation()
- Request Body: CreateTeacherRequest { name: string, email: string, password: string, universityId: string, courses?: string[], role: string }
- Response: Teacher
- Cache Invalidation: ['teachers', 'list'], optimistic updates
- Performance: Optimistic creation for immediate feedback
- Description: Create a new teacher

### Endpoint: updateTeacher
- Method: PATCH
- URL: /teachers/:id
- Mutation Key: ['teachers', 'update']
- API Source: lib/api/teachers.api.ts → updateTeacher()
- Hook: useUpdateTeacherMutation()
- Request Body: UpdateTeacherRequest { name?: string, email?: string, phone?: string, courses?: string[], role?: string }
- Response: Teacher
- Cache Invalidation: ['teachers', 'list'], ['teachers', 'detail', id]
- Performance: Optimistic updates for seamless editing
- Description: Update teacher information

### Endpoint: deleteTeacher
- Method: DELETE
- URL: /teachers/:id
- Mutation Key: ['teachers', 'delete']
- API Source: lib/api/teachers.api.ts → deleteTeacher()
- Hook: useDeleteTeacherMutation()
- Response: { message: string }
- Cache Invalidation: ['teachers', 'list'], cache removal
- Performance: Optimistic deletion with undo
- Description: Remove a teacher from the system

================================================================================
## ENTITY: ADMIN (4 endpoints)

### Endpoint: getAllAdmins
- Method: GET
- URL: /admins
- Query Key: ['admins', 'list']
- API Source: lib/api/admin.api.ts → getAllAdmins()
- Hook: useAdminsQuery()
- Response: Admin[]
- Performance: staleTime: 10min, background refetch
- Description: Fetch all admin users

### Endpoint: getAdminById
- Method: GET
- URL: /admins/:id
- Query Key: ['admins', 'detail', id]
- API Source: lib/api/admin.api.ts → getAdminById()
- Hook: useAdminQuery(id)
- Response: Admin
- Performance: staleTime: 10min, enabled: !!id
- Description: Fetch admin details by ID

### Endpoint: createAdmin
- Method: POST
- URL: /admins
- Mutation Key: ['admins', 'create']
- API Source: lib/api/admin.api.ts → createAdmin()
- Hook: useCreateAdminMutation()
- Request Body: CreateAdminRequest { name: string, email: string, password: string, universityId: string, role: string }
- Response: Admin
- Cache Invalidation: ['admins', 'list'], optimistic updates
- Performance: Optimistic creation
- Description: Create a new admin user

### Endpoint: updateAdmin
- Method: PATCH
- URL: /admins/:id
- Mutation Key: ['admins', 'update']
- API Source: lib/api/admin.api.ts → updateAdmin()
- Hook: useUpdateAdminMutation()
- Request Body: UpdateAdminRequest { name?: string, email?: string, phone?: string, role?: string }
- Response: Admin
- Cache Invalidation: ['admins', 'list'], ['admins', 'detail', id]
- Performance: Optimistic updates for immediate UI feedback
- Description: Update admin information

================================================================================
## ENTITY: UNIVERSITIES (5 endpoints)

### Endpoint: getAllUniversities
- Method: GET
- URL: /universities
- Query Key: ['universities', 'list']
- API Source: lib/api/universities.api.ts → getAllUniversities()
- Hook: useUniversitiesQuery()
- Response: University[]
- Performance: staleTime: 15min, background refetch
- Description: Fetch all universities

### Endpoint: getUniversityById
- Method: GET
- URL: /universities/:id
- Query Key: ['universities', 'detail', id]
- API Source: lib/api/universities.api.ts → getUniversityById()
- Hook: useUniversityQuery(id)
- Response: University
- Performance: staleTime: 15min, enabled: !!id
- Description: Fetch university details by ID

### Endpoint: createUniversity
- Method: POST
- URL: /universities
- Mutation Key: ['universities', 'create']
- API Source: lib/api/universities.api.ts → createUniversity()
- Hook: useCreateUniversityMutation()
- Request Body: CreateUniversityRequest { name, address, phone, email, ... }
- Response: University
- Cache Invalidation: ['universities', 'list'], optimistic updates
- Performance: Optimistic creation for immediate UI feedback
- Description: Create a new university

### Endpoint: updateUniversity
- Method: PATCH
- URL: /universities/:id
- Mutation Key: ['universities', 'update']
- API Source: lib/api/universities.api.ts → updateUniversity()
- Hook: useUpdateUniversityMutation()
- Request Body: UpdateUniversityRequest { name?, address?, phone?, ... }
- Response: University
- Cache Invalidation: ['universities', 'list'], ['universities', 'detail', id]
- Performance: Optimistic updates, precise cache updates
- Description: Update university information

### Endpoint: deleteUniversity
- Method: DELETE
- URL: /universities/:id
- Mutation Key: ['universities', 'delete']
- API Source: lib/api/universities.api.ts → deleteUniversity()
- Hook: useDeleteUniversityMutation()
- Response: { message: string }
- Cache Invalidation: ['universities', 'list'], cache removal
- Performance: Optimistic deletion with undo capability
- Description: Delete a university

================================================================================
## ENTITY: COLLEGES (5 endpoints)

### Endpoint: getAllColleges
- Method: GET
- URL: /colleges
- Query Key: ['colleges', 'list', { universityId? }]
- API Source: lib/api/colleges.api.ts → getAllColleges()
- Hook: useCollegesQuery({ universityId })
- Query Params: universityId?
- Response: College[]
- Performance: staleTime: 8min, background refetch
- Description: Fetch colleges, optionally filtered by university

### Endpoint: getCollegeById
- Method: GET
- URL: /colleges/:id
- Query Key: ['colleges', 'detail', id]
- API Source: lib/api/colleges.api.ts → getCollegeById()
- Hook: useCollegeQuery(id)
- Response: College
- Performance: staleTime: 12min, enabled: !!id
- Description: Fetch college details by ID

### Endpoint: createCollege
- Method: POST
- URL: /colleges
- Mutation Key: ['colleges', 'create']
- API Source: lib/api/colleges.api.ts → createCollege()
- Hook: useCreateCollegeMutation()
- Request Body: CreateCollegeRequest { name, address, universityId, ... }
- Response: College
- Cache Invalidation: ['colleges', 'list'], optimistic updates
- Performance: Optimistic creation for immediate UI feedback
- Description: Create a new college

### Endpoint: updateCollege
- Method: PATCH
- URL: /colleges/:id
- Mutation Key: ['colleges', 'update']
- API Source: lib/api/colleges.api.ts → updateCollege()
- Hook: useUpdateCollegeMutation()
- Request Body: UpdateCollegeRequest { name?, address?, ... }
- Response: College
- Cache Invalidation: ['colleges', 'list'], ['colleges', 'detail', id]
- Performance: Optimistic updates, precise cache updates
- Description: Update college information

### Endpoint: deleteCollege
- Method: DELETE
- URL: /colleges/:id
- Mutation Key: ['colleges', 'delete']
- API Source: lib/api/colleges.api.ts → deleteCollege()
- Hook: useDeleteCollegeMutation()
- Response: { message: string }
- Cache Invalidation: ['colleges', 'list'], cache removal
- Performance: Optimistic deletion with undo capability
- Description: Delete a college

================================================================================
## ENTITY: DEPARTMENTS (2 endpoints)

### Endpoint: getAllDepartments
- Method: GET
- URL: /departments
- Query Key: ['departments', 'list', { collegeId? }]
- API Source: lib/api/departments.api.ts → getAllDepartments()
- Hook: useDepartmentsQuery({ collegeId })
- Query Params: collegeId?
- Response: Department[]
- Performance: staleTime: 15min, background refetch
- Description: Fetch departments, optionally filtered by college

### Endpoint: getDepartmentById
- Method: GET
- URL: /departments/:id
- Query Key: ['departments', 'detail', id]
- API Source: lib/api/departments.api.ts → getDepartmentById()
- Hook: useDepartmentQuery(id)
- Response: Department
- Performance: staleTime: 15min, enabled: !!id
- Description: Fetch department details by ID

================================================================================

## IMPLEMENTATION NOTES

### Query Key Patterns
- List endpoints: ['entity', 'list', {...filters}]
- Detail endpoints: ['entity', 'detail', id]
- Mutation endpoints: ['entity', 'action'] (create/update/delete)

### Performance Optimization
- Use appropriate staleTime values based on data volatility
- Implement optimistic updates for better UX
- Configure background refetching for list views
- Add proper cache invalidation strategies

### Error Handling
- Implement proper error boundaries
- Add retry mechanisms for failed requests
- Show meaningful error messages to users
- Log errors for debugging purposes

### Type Safety
- Define proper TypeScript interfaces for all request/response types
- Use generic types for reusable patterns
- Ensure type safety in hooks and API functions