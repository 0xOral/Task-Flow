/*
📘 Enhanced Endpoint Map - React Query + Axios Architecture for LMS Project (32 Endpoints)
By Ahmed - Performance-Optimized Version

🎯 Purpose:
Complete documentation of all 32 endpoints with maximum performance, caching, and React Query integration.

=======================================================================
📦 ENTITY: COURSES (5 endpoints)
=======================================================================

🧾 Endpoint Name: getAllCourses
🔗 Method: GET
📍 URL: /courses
🧠 Query Key: ['courses', 'list', { page?, limit?, search?, universityId? }]
📁 API Source: lib/api/courses.api.ts → getAllCourses()
📁 Hook Source: hooks/api/useCourses.ts 
🪝 Hook: useCoursesQuery({ page, limit, search, universityId })
📤 Query Params: page?, limit?, search?, universityId?
📥 Response: { courses: Course[], total: number, page: number, totalPages: number }
⚡ Performance: staleTime: 5min, background refetch, infinite scroll ready
🎯 Fetch all available courses with pagination and filtering

-----------------------------------------------------------------------
🧾 Endpoint Name: getCourseById  
🔗 Method: GET
📍 URL: /courses/:id
🧠 Query Key: ['courses', 'detail', id]
📁 API Source: lib/api/courses.api.ts → getCourseById()
📁 Hook Source: hooks/api/useCourses.ts
🪝 Hook: useCourseQuery(id)
📥 Response: Course
⚡ Performance: staleTime: 10min, select for data transformation
🎯 Fetch a specific course by its ID

-----------------------------------------------------------------------
🧾 Endpoint Name: createCourse
🔗 Method: POST
📍 URL: /courses
🧠 Mutation Key: ['courses', 'create']
📁 API Source: lib/api/courses.api.ts → createCourse()
📁 Hook Source: hooks/api/useCourses.ts
🪝 Hook: useCreateCourseMutation()
📤 Body: CreateCourseRequest { name: string, description: string, universityId: string, teacherId: string }
📥 Response: Course
🔄 Invalidates: ['courses', 'list'], optimistic updates
⚡ Performance: Immediate UI update, background sync
🎯 Create a new course

-----------------------------------------------------------------------
🧾 Endpoint Name: updateCourse
🔗 Method: PATCH
📍 URL: /courses/:id  
🧠 Mutation Key: ['courses', 'update']
📁 API Source: lib/api/courses.api.ts → updateCourse()
📁 Hook Source: hooks/api/useCourses.ts
🪝 Hook: useUpdateCourseMutation()
📤 Body: UpdateCourseRequest { name?: string, description?: string, teacherId?: string }
📥 Response: Course
🔄 Invalidates: ['courses', 'list'], ['courses', 'detail', id], optimistic updates
⚡ Performance: Optimistic updates, precise cache updates
🎯 Update an existing course

-----------------------------------------------------------------------
🧾 Endpoint Name: deleteCourse
🔗 Method: DELETE
📍 URL: /courses/:id
🧠 Mutation Key: ['courses', 'delete']
📁 API Source: lib/api/courses.api.ts → deleteCourse()
📁 Hook Source: hooks/api/useCourses.ts
🪝 Hook: useDeleteCourseMutation()
📥 Response: { message: string }
🔄 Invalidates: ['courses', 'list'], removes from cache
⚡ Performance: Optimistic removal, rollback on error
🎯 Delete a course by ID

=======================================================================
📦 ENTITY: STUDENTS (5 endpoints)  
=======================================================================

🧾 Endpoint Name: getAllStudents
🔗 Method: GET
📍 URL: /students
🧠 Query Key: ['students', 'list', { page?, limit?, search?, universityId? }]
📁 API Source: lib/api/students.api.ts → getAllStudents()
📁 Hook Source: hooks/api/useStudents.ts
🪝 Hook: useStudentsQuery({ page, limit, search, universityId })
📤 Query Params: page?, limit?, search?, universityId?
📥 Response: { students: Student[], total: number, page: number, totalPages: number }
⚡ Performance: staleTime: 2min, background refetch, infinite scroll
🎯 Fetch all students with pagination and filtering

-----------------------------------------------------------------------
🧾 Endpoint Name: getStudentById
🔗 Method: GET
📍 URL: /students/:id
🧠 Query Key: ['students', 'detail', id]
📁 API Source: lib/api/students.api.ts → getStudentById()
📁 Hook Source: hooks/api/useStudents.ts
🪝 Hook: useStudentQuery(id)
📥 Response: Student
⚡ Performance: staleTime: 5min, enabled: !!id
🎯 Fetch student details by ID

-----------------------------------------------------------------------
🧾 Endpoint Name: createStudent
🔗 Method: POST
📍 URL: /students
🧠 Mutation Key: ['students', 'create']
📁 API Source: lib/api/students.api.ts → createStudent()
📁 Hook Source: hooks/api/useStudents.ts
🪝 Hook: useCreateStudentMutation()
📤 Body: CreateStudentRequest { name: string, email: string, password: string, universityId: string, courses?: string[] }
📥 Response: Student
🔄 Invalidates: ['students', 'list'], optimistic updates
⚡ Performance: Optimistic creation, immediate UI feedback
🎯 Create a new student

-----------------------------------------------------------------------
🧾 Endpoint Name: updateStudent
🔗 Method: PATCH
📍 URL: /students/:id
🧠 Mutation Key: ['students', 'update']
📁 API Source: lib/api/students.api.ts → updateStudent()
📁 Hook Source: hooks/api/useStudents.ts
🪝 Hook: useUpdateStudentMutation()
📤 Body: UpdateStudentRequest { name?: string, email?: string, phone?: string, courses?: string[] }
📥 Response: Student
🔄 Invalidates: ['students', 'list'], ['students', 'detail', id]
⚡ Performance: Optimistic updates, debounced auto-save
🎯 Update student information

-----------------------------------------------------------------------
🧾 Endpoint Name: deleteStudent
🔗 Method: DELETE
📍 URL: /students/:id
🧠 Mutation Key: ['students', 'delete']
📁 API Source: lib/api/students.api.ts → deleteStudent()
📁 Hook Source: hooks/api/useStudents.ts
🪝 Hook: useDeleteStudentMutation()
📥 Response: { message: string }
🔄 Invalidates: ['students', 'list'], cache removal
⚡ Performance: Optimistic deletion with undo capability
🎯 Remove a student from the system

=======================================================================
📦 ENTITY: TEACHERS (5 endpoints)
=======================================================================

🧾 Endpoint Name: getAllTeachers
🔗 Method: GET
📍 URL: /teachers
🧠 Query Key: ['teachers', 'list', { page?, limit?, search?, universityId? }]
📁 API Source: lib/api/teachers.api.ts → getAllTeachers()
📁 Hook Source: hooks/api/useTeachers.ts
🪝 Hook: useTeachersQuery({ page, limit, search, universityId })
📤 Query Params: page?, limit?, search?, universityId?
📥 Response: { teachers: Teacher[], total: number, page: number, totalPages: number }
⚡ Performance: staleTime: 3min, background refetch, infinite scroll
🎯 Fetch all teachers with pagination and filtering

-----------------------------------------------------------------------
🧾 Endpoint Name: getTeacherById
🔗 Method: GET
📍 URL: /teachers/:id
🧠 Query Key: ['teachers', 'detail', id]
📁 API Source: lib/api/teachers.api.ts → getTeacherById()
📁 Hook Source: hooks/api/useTeachers.ts
🪝 Hook: useTeacherQuery(id)
📥 Response: Teacher
⚡ Performance: staleTime: 8min, enabled: !!id
🎯 Fetch teacher details by ID

-----------------------------------------------------------------------
🧾 Endpoint Name: createTeacher
🔗 Method: POST
📍 URL: /teachers
🧠 Mutation Key: ['teachers', 'create']
📁 API Source: lib/api/teachers.api.ts → createTeacher()
📁 Hook Source: hooks/api/useTeachers.ts
🪝 Hook: useCreateTeacherMutation()
📤 Body: CreateTeacherRequest { name: string, email: string, password: string, universityId: string, courses?: string[], role: string }
📥 Response: Teacher
🔄 Invalidates: ['teachers', 'list'], optimistic updates
⚡ Performance: Optimistic creation, immediate UI feedback
🎯 Create a new teacher

-----------------------------------------------------------------------
🧾 Endpoint Name: updateTeacher
🔗 Method: PATCH
📍 URL: /teachers/:id
🧠 Mutation Key: ['teachers', 'update']
📁 API Source: lib/api/teachers.api.ts → updateTeacher()
📁 Hook Source: hooks/api/useTeachers.ts
🪝 Hook: useUpdateTeacherMutation()
📤 Body: UpdateTeacherRequest { name?: string, email?: string, phone?: string, courses?: string[], role?: string }
📥 Response: Teacher
🔄 Invalidates: ['teachers', 'list'], ['teachers', 'detail', id]
⚡ Performance: Optimistic updates, debounced auto-save
🎯 Update teacher information

-----------------------------------------------------------------------
🧾 Endpoint Name: deleteTeacher
🔗 Method: DELETE
📍 URL: /teachers/:id
🧠 Mutation Key: ['teachers', 'delete']
📁 API Source: lib/api/teachers.api.ts → deleteTeacher()
📁 Hook Source: hooks/api/useTeachers.ts
🪝 Hook: useDeleteTeacherMutation()
📥 Response: { message: string }
🔄 Invalidates: ['teachers', 'list'], cache removal
⚡ Performance: Optimistic deletion with undo capability
🎯 Remove a teacher from the system

=======================================================================
📦 ENTITY: ADMIN (4 endpoints)
=======================================================================

🧾 Endpoint Name: getAllAdmins
🔗 Method: GET
📍 URL: /admins
🧠 Query Key: ['admins', 'list']
📁 API Source: lib/api/admin.api.ts → getAllAdmins()
📁 Hook Source: hooks/api/useAdmins.ts
🪝 Hook: useAdminsQuery()
📥 Response: Admin[]
⚡ Performance: staleTime: 10min, background refetch
🎯 Fetch all admin users

-----------------------------------------------------------------------
🧾 Endpoint Name: getAdminById
🔗 Method: GET
📍 URL: /admins/:id
🧠 Query Key: ['admins', 'detail', id]
📁 API Source: lib/api/admin.api.ts → getAdminById()
📁 Hook Source: hooks/api/useAdmins.ts
🪝 Hook: useAdminQuery(id)
📥 Response: Admin
⚡ Performance: staleTime: 10min, enabled: !!id
🎯 Fetch admin details by ID

-----------------------------------------------------------------------
🧾 Endpoint Name: createAdmin
🔗 Method: POST
📍 URL: /admins
🧠 Mutation Key: ['admins', 'create']
📁 API Source: lib/api/admin.api.ts → createAdmin()
📁 Hook Source: hooks/api/useAdmins.ts
🪝 Hook: useCreateAdminMutation()
📤 Body: CreateAdminRequest { name: string, email: string, password: string, universityId: string, role: string }
📥 Response: Admin
🔄 Invalidates: ['admins', 'list'], optimistic updates
⚡ Performance: Optimistic creation, immediate UI feedback
🎯 Create a new admin user

-----------------------------------------------------------------------
🧾 Endpoint Name: updateAdmin
🔗 Method: PATCH
📍 URL: /admins/:id
🧠 Mutation Key: ['admins', 'update']
📁 API Source: lib/api/admin.api.ts → updateAdmin()
📁 Hook Source: hooks/api/useAdmins.ts
🪝 Hook: useUpdateAdminMutation()
📤 Body: UpdateAdminRequest { name?: string, email?: string, phone?: string, role?: string }
📥 Response: Admin
🔄 Invalidates: ['admins', 'list'], ['admins', 'detail', id]
⚡ Performance: Optimistic updates, immediate UI feedback
🎯 Update admin information

=======================================================================
📦 ENTITY: UNIVERSITIES (5 endpoints)
=======================================================================

🧾 Endpoint Name: getAllUniversities
🔗 Method: GET
📍 URL: /universities
🧠 Query Key: ['universities', 'list']
📁 API Source: lib/api/universities.api.ts → getAllUniversities()
📁 Hook Source: hooks/api/useUniversities.ts
🪝 Hook: useUniversitiesQuery()
📥 Response: University[]
⚡ Performance: staleTime: 15min, background refetch
🎯 Fetch all universities

-----------------------------------------------------------------------
🧾 Endpoint Name: getUniversityById
🔗 Method: GET
📍 URL: /universities/:id
🧠 Query Key: ['universities', 'detail', id]
📁 API Source: lib/api/universities.api.ts → getUniversityById()
📁 Hook Source: hooks/api/useUniversities.ts
🪝 Hook: useUniversityQuery(id)
📥 Response: University
⚡ Performance: staleTime: 15min, enabled: !!id
🎯 Fetch university details by ID

-----------------------------------------------------------------------
🧾 Endpoint Name: createUniversity
🔗 Method: POST
📍 URL: /universities
🧠 Mutation Key: ['universities', 'create']
📁 API Source: lib/api/universities.api.ts → createUniversity()
📁 Hook Source: hooks/api/useUniversities.ts
🪝 Hook: useCreateUniversityMutation()
📤 Body: CreateUniversityRequest { name: string, address: string, phone: string, email: string, location: string, description: string, website?: string, establishedYear?: number, logo?: string }
📥 Response: University
🔄 Invalidates: ['universities', 'list'], optimistic updates
⚡ Performance: Optimistic creation, immediate UI feedback
🎯 Create a new university

-----------------------------------------------------------------------
🧾 Endpoint Name: updateUniversity
🔗 Method: PATCH
📍 URL: /universities/:id
🧠 Mutation Key: ['universities', 'update']
📁 API Source: lib/api/universities.api.ts → updateUniversity()
📁 Hook Source: hooks/api/useUniversities.ts
🪝 Hook: useUpdateUniversityMutation()
📤 Body: UpdateUniversityRequest { name?: string, address?: string, phone?: string, email?: string, location?: string, description?: string, website?: string, establishedYear?: number, logo?: string }
📥 Response: University
🔄 Invalidates: ['universities', 'list'], ['universities', 'detail', id]
⚡ Performance: Optimistic updates, precise cache updates
🎯 Update university information

-----------------------------------------------------------------------
🧾 Endpoint Name: deleteUniversity
🔗 Method: DELETE
📍 URL: /universities/:id
🧠 Mutation Key: ['universities', 'delete']
📁 API Source: lib/api/universities.api.ts → deleteUniversity()
📁 Hook Source: hooks/api/useUniversities.ts
🪝 Hook: useDeleteUniversityMutation()
📥 Response: { message: string }
🔄 Invalidates: ['universities', 'list'], cache removal
⚡ Performance: Optimistic deletion with undo capability
🎯 Delete a university

=======================================================================
📦 ENTITY: COLLEGES (5 endpoints) 
=======================================================================

🧾 Endpoint Name: getAllColleges
🔗 Method: GET
📍 URL: /colleges
🧠 Query Key: ['colleges', 'list', { universityId? }]
📁 API Source: lib/api/colleges.api.ts → getAllColleges()
📁 Hook Source: hooks/api/useColleges.ts
🪝 Hook: useCollegesQuery({ universityId })
📤 Query Params: universityId?
📥 Response: College[]
⚡ Performance: staleTime: 8min, background refetch
🎯 Fetch colleges, optionally filtered by university

-----------------------------------------------------------------------
🧾 Endpoint Name: getCollegeById
🔗 Method: GET
📍 URL: /colleges/:id
🧠 Query Key: ['colleges', 'detail', id]
📁 API Source: lib/api/colleges.api.ts → getCollegeById()
📁 Hook Source: hooks/api/useColleges.ts
🪝 Hook: useCollegeQuery(id)
📥 Response: College
⚡ Performance: staleTime: 12min, enabled: !!id
🎯 Fetch college details by ID

-----------------------------------------------------------------------
🧾 Endpoint Name: createCollege
🔗 Method: POST
📍 URL: /colleges
🧠 Mutation Key: ['colleges', 'create']
📁 API Source: lib/api/colleges.api.ts → createCollege()
📁 Hook Source: hooks/api/useColleges.ts
🪝 Hook: useCreateCollegeMutation()
📤 Body: CreateCollegeRequest { name: string, address: string, phone: string, email: string, location: string, description: string, website?: string, establishedYear?: number, logo?: string, universityId: string }
📥 Response: College
🔄 Invalidates: ['colleges', 'list'], optimistic updates
⚡ Performance: Optimistic creation, immediate UI feedback
🎯 Create a new college

-----------------------------------------------------------------------
🧾 Endpoint Name: updateCollege
🔗 Method: PATCH
📍 URL: /colleges/:id
🧠 Mutation Key: ['colleges', 'update']
📁 API Source: lib/api/colleges.api.ts → updateCollege()
📁 Hook Source: hooks/api/useColleges.ts
🪝 Hook: useUpdateCollegeMutation()
📤 Body: UpdateCollegeRequest { name?: string, address?: string, phone?: string, email?: string, location?: string, description?: string, website?: string, establishedYear?: number, logo?: string }
📥 Response: College
🔄 Invalidates: ['colleges', 'list'], ['colleges', 'detail', id]
⚡ Performance: Optimistic updates, precise cache updates
🎯 Update college information

-----------------------------------------------------------------------
🧾 Endpoint Name: deleteCollege
🔗 Method: DELETE
📍 URL: /colleges/:id
🧠 Mutation Key: ['colleges', 'delete']
📁 API Source: lib/api/colleges.api.ts → deleteCollege()
📁 Hook Source: hooks/api/useColleges.ts
🪝 Hook: useDeleteCollegeMutation()
📥 Response: { message: string }
🔄 Invalidates: ['colleges', 'list'], cache removal
⚡ Performance: Optimistic deletion with undo capability
🎯 Delete a college

=======================================================================
📦 ENTITY: DEPARTMENTS (2 endpoints)
=======================================================================

🧾 Endpoint Name: getAllDepartments
🔗 Method: GET
📍 URL: /departments
🧠 Query Key: ['departments', 'list', { collegeId? }]
📁 API Source: lib/api/departments.api.ts → getAllDepartments()
📁 Hook Source: hooks/api/useDepartments.ts
🪝 Hook: useDepartmentsQuery({ collegeId })
📤 Query Params: collegeId?
📥 Response: Department[]
⚡ Performance: staleTime: 15min, background refetch
🎯 Fetch departments, optionally filtered by college

-----------------------------------------------------------------------
🧾 Endpoint Name: getDepartmentById
🔗 Method: GET
📍 URL: /departments/:id
🧠 Query Key: ['departments', 'detail', id]
📁 API Source: lib/api/departments.api.ts → getDepartmentById()
📁 Hook Source: hooks/api/useDepartments.ts
🪝 Hook: useDepartmentQuery(id)
📥 Response: Department
⚡ Performance: staleTime: 15min, enabled: !!id
🎯 Fetch department details by ID

=======================================================================
📊 SUMMARY: 32 Total Endpoints - React Query Architecture
=======================================================================
- Courses: 5 endpoints (CRUD + list)
- Students: 5 endpoints (CRUD + list)
- Teachers: 5 endpoints (CRUD + list)  
- Admin: 4 endpoints (CRUD - no delete)
- Universities: 2 endpoints (RU ( read update ))
- Colleges: 2 endpoints (RU ( read update ))
- Departments: 2 endpoints (read-only)

📌 Performance-Optimized Features:
✅ React Query + Axios for superior caching and performance
✅ Optimistic updates for immediate UI feedback
✅ Background refetching without loading states
✅ Intelligent cache invalidation and updates
✅ Configurable staleTime based on data frequency
✅ Infinite scroll ready for large datasets
✅ Dependent queries and prefetching capabilities
✅ Error boundaries and retry strategies

=======================================================================
📊 SUMMARY: 32 Total Endpoints - React Query Architecture
=======================================================================
- Courses: 5 endpoints (CRUD + list)
- Students: 5 endpoints (CRUD + list)
- Teachers: 5 endpoints (CRUD + list)  
- Admin: 5 endpoints (CRUD + list)
- Universities: 2 endpoints (RU ( read update ))
- Colleges: 5 endpoints (CRUD + list)
- Departments: 5 endpoints (CRUD + list)

📌 Performance-Optimized Features:
✅ React Query + Axios for superior caching and performance
✅ Optimistic updates for immediate UI feedback
✅ Background refetching without loading states
✅ Intelligent cache invalidation and updates
✅ Configurable staleTime based on data frequency
✅ Infinite scroll ready for large datasets
✅ Dependent queries and prefetching capabilities
✅ Error boundaries and retry strategies
✅ TypeScript integration with precise typing
✅ File organization: lib/api/ + hooks/api/

🚀 Architecture Benefits:
- **Superior Performance**: Background sync, optimistic updates, intelligent caching
- **Better UX**: Instant feedback, minimal loading states, offline support
- **Developer Experience**: DevTools, predictable patterns, TypeScript safety
- **Scalability**: Handles 32 endpoints with consistent performance patterns

END OF ENHANCED FORMAT ✅
*/
